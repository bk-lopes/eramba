apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.simple-install.yml
    kompose.version: 1.37.0 (fb0539e64)
  labels:
    io.kompose.service: cron
  name: cron
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: cron
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.simple-install.yml
        kompose.version: 1.37.0 (fb0539e64)
      labels:
        io.kompose.service: cron
    spec:
      containers:
      - args:
        - cron
        - -f
        command:
        - /docker-cron-entrypoint.sh
        env:
        - name: CACHE_URL
          value: Redis://?server=redis.default.svc.cluster.local&port=6379&password=&timeout=3
        - name: DB_DATABASE
          value: docker
        - name: DB_HOST
          value: mmysql.default.svc.cluster.local
        - name: DB_PASSWORD
          value: Your_DB_user_P@ssw0rd
        - name: DB_USERNAME
          value: docker
        - name: DOCKER_DEPLOYMENT
          value: "1"
        - name: LDAPTLS_REQCERT
          value: never
        - name: PROXY_AUTH_PASS
        - name: PROXY_AUTH_USER
        - name: PROXY_HOST
        - name: PROXY_PORT
        - name: PUBLIC_ADDRESS
          value: https://eramba.local:8443
        - name: USE_PROXY
          value: "0"
        - name: USE_PROXY_AUTH
          value: "0"
        image: ghcr.io/eramba/eramba:latest
        imagePullPolicy: IfNotPresent
        name: cron
        volumeMounts:
        # - mountPath: /var/www/eramba/app/upgrade/data
        #   name: data
        # - mountPath: /var/www/eramba
        #   name: app
        - mountPath: /var/www/eramba/app/upgrade/logs
          name: logs
        - mountPath: /docker-cron-entrypoint.sh
          name: cron-cm3
          subPath: docker-cron-entrypoint.sh
        - mountPath: /etc/cron.d/eramba-crontab
          name: cron-cm4
          subPath: eramba-crontab
        - mountPath: /var/www/docker.env
          name: cron-cm5
          subPath: docker.env
      restartPolicy: Always
      volumes:
      # - name: data
      #   persistentVolumeClaim:
      #     claimName: data
      # - name: app
      #   persistentVolumeClaim:
      #     claimName: app
      - name: logs
        persistentVolumeClaim:
          claimName: logs
      - configMap:
          items:
          - key: docker-cron-entrypoint.sh
            path: docker-cron-entrypoint.sh
          name: cron-cm3
        name: cron-cm3
      - configMap:
          items:
          - key: crontab
            path: eramba-crontab
          name: cron-cm4
        name: cron-cm4
      - configMap:
          items:
          - key: .env
            path: docker.env
          name: cron-cm5
        name: cron-cm5
